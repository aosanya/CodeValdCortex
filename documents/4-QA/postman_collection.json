{
    "info": {
        "_postman_id": "codevaldcortex-api-tests",
        "name": "CodeValdCortex API Tests",
        "description": "Comprehensive API test collection for CodeValdCortex multi-agent orchestration platform",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "codevaldcortex"
    },
    "item": [
        {
            "name": "Health & Status",
            "item": [
                {
                    "name": "Health Check",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has status field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(jsonData.status).to.eql('healthy');",
                                    "});",
                                    "",
                                    "pm.test(\"Response time is less than 200ms\", function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(200);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/health",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "health"
                            ]
                        },
                        "description": "Verify the application health status"
                    },
                    "response": []
                },
                {
                    "name": "System Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response contains app_name\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('app_name');",
                                    "    pm.expect(jsonData.app_name).to.eql('CodeValdCortex');",
                                    "});",
                                    "",
                                    "pm.test(\"Response contains version\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('version');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/v1/status",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "status"
                            ]
                        },
                        "description": "Get overall system status information"
                    },
                    "response": []
                }
            ],
            "description": "Basic health and status endpoints"
        },
        {
            "name": "Agent Management",
            "item": [
                {
                    "name": "List Agents",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response is an array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/agents",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "agents"
                            ]
                        },
                        "description": "Retrieve a list of all registered agents"
                    },
                    "response": []
                },
                {
                    "name": "Create Agent",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has agent ID\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('id');",
                                    "    pm.environment.set('agent_id', jsonData.id);",
                                    "});",
                                    "",
                                    "pm.test(\"Agent has correct name\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.name).to.eql('test-agent');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"test-agent\",\n    \"type\": \"worker\",\n    \"config\": {\n        \"image\": \"codevaldcortex/agent:latest\",\n        \"resources\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"128Mi\"\n        }\n    },\n    \"metadata\": {\n        \"description\": \"Test agent for API validation\",\n        \"tags\": [\"test\", \"validation\"]\n    }\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/agents",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "agents"
                            ]
                        },
                        "description": "Create a new agent instance"
                    },
                    "response": []
                },
                {
                    "name": "Get Agent Details",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response contains agent details\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('id');",
                                    "    pm.expect(jsonData).to.have.property('name');",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/agents/{{agent_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "agents",
                                "{{agent_id}}"
                            ]
                        },
                        "description": "Get detailed information about a specific agent"
                    },
                    "response": []
                },
                {
                    "name": "Update Agent",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Agent configuration updated\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.config.resources.cpu).to.eql('200m');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"config\": {\n        \"resources\": {\n            \"cpu\": \"200m\",\n            \"memory\": \"256Mi\"\n        }\n    }\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/agents/{{agent_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "agents",
                                "{{agent_id}}"
                            ]
                        },
                        "description": "Update agent configuration"
                    },
                    "response": []
                },
                {
                    "name": "Scale Agent",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Agent replicas updated\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.replicas).to.eql(3);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"replicas\": 3\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/agents/{{agent_id}}/scale",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "agents",
                                "{{agent_id}}",
                                "scale"
                            ]
                        },
                        "description": "Scale agent replicas"
                    },
                    "response": []
                },
                {
                    "name": "Delete Agent",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 204\", function () {",
                                    "    pm.response.to.have.status(204);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/agents/{{agent_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "agents",
                                "{{agent_id}}"
                            ]
                        },
                        "description": "Terminate and delete an agent"
                    },
                    "response": []
                }
            ],
            "description": "Agent lifecycle management endpoints"
        },
        {
            "name": "Workflow Management",
            "item": [
                {
                    "name": "List Workflows",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response is an array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/workflows",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "workflows"
                            ]
                        },
                        "description": "Get all workflow definitions"
                    },
                    "response": []
                },
                {
                    "name": "Create Workflow",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has workflow ID\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('id');",
                                    "    pm.environment.set('workflow_id', jsonData.id);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"test-workflow\",\n    \"description\": \"Test workflow for validation\",\n    \"tasks\": [\n        {\n            \"id\": \"task-1\",\n            \"type\": \"http\",\n            \"config\": {\n                \"url\": \"https://api.example.com/data\",\n                \"method\": \"GET\"\n            }\n        },\n        {\n            \"id\": \"task-2\",\n            \"type\": \"agent\",\n            \"config\": {\n                \"agent_id\": \"{{agent_id}}\",\n                \"message\": \"Process data\"\n            },\n            \"depends_on\": [\"task-1\"]\n        }\n    ]\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/workflows",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "workflows"
                            ]
                        },
                        "description": "Create a new workflow definition"
                    },
                    "response": []
                },
                {
                    "name": "Execute Workflow",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 202\", function () {",
                                    "    pm.response.to.have.status(202);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has execution ID\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('execution_id');",
                                    "    pm.environment.set('execution_id', jsonData.execution_id);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"parameters\": {\n        \"input_data\": \"test data\",\n        \"retry_count\": 3\n    }\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/workflows/{{workflow_id}}/execute",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "workflows",
                                "{{workflow_id}}",
                                "execute"
                            ]
                        },
                        "description": "Execute a workflow with parameters"
                    },
                    "response": []
                },
                {
                    "name": "Get Execution Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has status field\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('status');",
                                    "    pm.expect(['pending', 'running', 'completed', 'failed']).to.include(jsonData.status);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/executions/{{execution_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "executions",
                                "{{execution_id}}"
                            ]
                        },
                        "description": "Get workflow execution status and details"
                    },
                    "response": []
                }
            ],
            "description": "Workflow orchestration endpoints"
        },
        {
            "name": "Metrics & Monitoring",
            "item": [
                {
                    "name": "System Metrics",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response contains metrics\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('metrics');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/metrics",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "metrics"
                            ]
                        },
                        "description": "Get system performance metrics"
                    },
                    "response": []
                },
                {
                    "name": "Prometheus Metrics",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/metrics",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "metrics"
                            ]
                        },
                        "description": "Get Prometheus-formatted metrics"
                    },
                    "response": []
                }
            ],
            "description": "System metrics and monitoring endpoints"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:8080",
            "type": "string"
        },
        {
            "key": "auth_token",
            "value": "",
            "type": "string"
        },
        {
            "key": "agent_id",
            "value": "",
            "type": "string"
        },
        {
            "key": "workflow_id",
            "value": "",
            "type": "string"
        },
        {
            "key": "execution_id",
            "value": "",
            "type": "string"
        }
    ]
}