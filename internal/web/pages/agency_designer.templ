package pages

import (
	"github.com/aosanya/CodeValdCortex/internal/ai"
	"github.com/aosanya/CodeValdCortex/internal/agency"
	"github.com/aosanya/CodeValdCortex/internal/web/components"
)

// AgencyDesignerPage renders the AI-powered agency designer interface
templ AgencyDesignerPage(currentAgency *agency.Agency, conversation *ai.ConversationContext) {
	@components.LayoutWithAgency("AI Agency Designer", currentAgency) {
		<!-- Agency Designer Specific CSS -->
		<link rel="stylesheet" href="/static/css/agency-designer.css"/>
		
		<!-- Agency Designer JavaScript -->
		<script src="/static/js/agency-designer.js" defer></script>
		
		<div class="container is-fluid agency-designer-container">
			<div class="columns is-gapless is-fullheight">
				<!-- Left Panel: AI Conversation -->
				<div class="column is-7 design-chat-panel">
					<header class="panel-header">
						<div class="media">
							<div class="media-left">
								<span class="icon is-large has-text-primary">
									<i class="fas fa-robot fa-2x"></i>
								</span>
							</div>
							<div class="media-content">
								<h2 class="title is-4">🧠 AI Agency Designer</h2>
								<p class="subtitle is-6">Let's design { currentAgency.Name } architecture together</p>
							</div>
						</div>
						<div class="phase-indicator">
							@PhaseIndicator(conversation)
						</div>
					</header>
					
					<div class="chat-messages-container" id="chat-messages">
						if conversation != nil && len(conversation.Messages) > 0 {
							@ChatMessages(conversation.Messages)
						} else {
							@WelcomeMessage(currentAgency.Name)
						}
					</div>
					
					<!-- Typing Indicator -->
					<div class="typing-indicator" id="typing-indicator" style="display: none;">
						<div class="typing-bubble">
							<span></span><span></span><span></span>
						</div>
					</div>
					
					<!-- Chat Input -->
					<footer class="chat-input-container">
						@ChatInput(currentAgency.ID, conversation)
					</footer>
				</div>
				
				<!-- Right Panel: Design Preview -->
				<div class="column is-5 design-preview-panel">
					<header class="panel-header">
						<h3 class="title is-5">📐 Design Preview</h3>
					</header>
					
					<div class="preview-content" id="design-preview">
						if conversation != nil && conversation.CurrentDesign != nil {
							@DesignPreview(conversation.CurrentDesign)
						} else {
							@EmptyDesignPreview()
						}
					</div>
					
					<!-- Action Buttons -->
					<footer class="preview-actions">
						if conversation != nil && conversation.Phase == ai.PhaseValidation {
							<button 
								class="button is-success is-fullwidth"
								hx-post={ "/api/v1/conversations/" + conversation.ID + "/generate" }
								hx-target="#design-preview"
								hx-indicator="#generate-spinner">
								<span class="icon">
									<i class="fas fa-check-circle"></i>
								</span>
								<span>Generate Final Design</span>
							</button>
							<span class="spinner" id="generate-spinner" style="display: none;">
								<i class="fas fa-spinner fa-spin"></i>
							</span>
						} else {
							<div class="notification is-info is-light">
								<p>💡 Continue the conversation to build your agency design</p>
							</div>
						}
					</footer>
				</div>
			</div>
		</div>
	}
}

// PhaseIndicator shows the current conversation phase
templ PhaseIndicator(conversation *ai.ConversationContext) {
	<div class="phases">
		<div class={ "phase-step", templ.KV("is-active", conversation == nil || conversation.Phase == ai.PhaseInitial) }>
			<span class="phase-icon">🚀</span>
			<span class="phase-label">Start</span>
		</div>
		<div class={ "phase-step", templ.KV("is-active", conversation != nil && conversation.Phase == ai.PhaseRequirements), templ.KV("is-complete", conversation != nil && conversation.Phase > ai.PhaseRequirements) }>
			<span class="phase-icon">📋</span>
			<span class="phase-label">Requirements</span>
		</div>
		<div class={ "phase-step", templ.KV("is-active", conversation != nil && conversation.Phase == ai.PhaseAgentBrainstorm), templ.KV("is-complete", conversation != nil && conversation.Phase > ai.PhaseAgentBrainstorm) }>
			<span class="phase-icon">💡</span>
			<span class="phase-label">Brainstorm</span>
		</div>
		<div class={ "phase-step", templ.KV("is-active", conversation != nil && conversation.Phase == ai.PhaseRelationshipMapping), templ.KV("is-complete", conversation != nil && conversation.Phase > ai.PhaseRelationshipMapping) }>
			<span class="phase-icon">🔗</span>
			<span class="phase-label">Mapping</span>
		</div>
		<div class={ "phase-step", templ.KV("is-active", conversation != nil && conversation.Phase == ai.PhaseValidation), templ.KV("is-complete", conversation != nil && conversation.Phase > ai.PhaseValidation) }>
			<span class="phase-icon">✅</span>
			<span class="phase-label">Validation</span>
		</div>
		<div class={ "phase-step", templ.KV("is-active", conversation != nil && conversation.Phase == ai.PhaseComplete) }>
			<span class="phase-icon">🎉</span>
			<span class="phase-label">Complete</span>
		</div>
	</div>
}

// WelcomeMessage displays the initial greeting
templ WelcomeMessage(agencyName string) {
	<div class="message ai-message welcome-message">
		<div class="message-avatar">
			<span class="icon is-large has-text-primary">
				<i class="fas fa-robot fa-2x"></i>
			</span>
		</div>
		<div class="message-content">
			<div class="message-bubble">
				<p><strong>Hi! I'm your AI Agency Designer.</strong> 🤖</p>
				<p>I'll help you create a complete multi-agent architecture for <strong>{ agencyName }</strong>.</p>
				<p>Let's start by understanding your use case:</p>
				<ul>
					<li>What problem are you trying to solve?</li>
					<li>What are the main processes or workflows?</li>
					<li>Who are the key actors or stakeholders?</li>
				</ul>
				<p class="mt-4"><em>💡 Tip: Be as detailed as you can - I'll help you refine the details as we go!</em></p>
			</div>
		</div>
	</div>
}

// ChatMessages renders the conversation history
templ ChatMessages(messages []ai.Message) {
	for _, msg := range messages {
		if msg.Role == "user" {
			@UserMessage(msg)
		} else {
			@AIMessage(msg)
		}
	}
}

// UserMessage renders a user message bubble
templ UserMessage(msg ai.Message) {
	<div class="message user-message">
		<div class="message-content">
			<div class="message-bubble">
				<p>{ msg.Content }</p>
			</div>
			<div class="message-time">
				{ msg.Timestamp.Format("3:04 PM") }
			</div>
		</div>
		<div class="message-avatar">
			<span class="icon is-medium has-text-info">
				<i class="fas fa-user"></i>
			</span>
		</div>
	</div>
}

// AIMessage renders an AI assistant message bubble
templ AIMessage(msg ai.Message) {
	<div class="message ai-message">
		<div class="message-avatar">
			<span class="icon is-medium has-text-primary">
				<i class="fas fa-robot"></i>
			</span>
		</div>
		<div class="message-content">
			<div class="message-bubble">
				@templ.Raw(formatAIMessage(msg.Content))
			</div>
			<div class="message-time">
				{ msg.Timestamp.Format("3:04 PM") }
			</div>
		</div>
	</div>
}

// ChatInput renders the message input form
templ ChatInput(agencyID string, conversation *ai.ConversationContext) {
	<form 
		hx-post={ getMessageEndpoint(agencyID, conversation) }
		hx-target="#chat-messages"
		hx-swap="beforeend"
		hx-indicator="#typing-indicator"
		hx-on::after-request="document.getElementById('user-input').value = ''; document.getElementById('chat-messages').scrollTop = document.getElementById('chat-messages').scrollHeight;">
		
		<div class="field has-addons">
			<div class="control is-expanded">
				<input 
					class="input is-medium" 
					type="text" 
					name="message"
					id="user-input"
					placeholder="Describe your requirements, ask questions, or provide feedback..."
					required
					autocomplete="off"/>
			</div>
			<div class="control">
				<button class="button is-primary is-medium" type="submit">
					<span class="icon">
						<i class="fas fa-paper-plane"></i>
					</span>
					<span>Send</span>
				</button>
			</div>
		</div>
		
		<p class="help has-text-centered">
			💡 <strong>Tip:</strong> Be specific about your requirements. I can help brainstorm agent types, define relationships, and validate your architecture.
		</p>
	</form>
}

// DesignPreview shows the current agency design draft
templ DesignPreview(design *ai.AgencyDesign) {
	<div class="design-summary">
		<div class="box">
			<h4 class="title is-6">🎯 Agency Name</h4>
			<p>{ design.Name }</p>
		</div>
		
		if len(design.AgentTypes) > 0 {
			<div class="box">
				<h4 class="title is-6">🤖 Agent Types ({ string(rune(len(design.AgentTypes))) })</h4>
				<div class="agent-types-list">
					for _, agentType := range design.AgentTypes {
						<div class="agent-type-card">
							<strong>{ agentType.Name }</strong>
							<p class="is-size-7">{ agentType.Description }</p>
							if len(agentType.Capabilities) > 0 {
								<div class="tags are-small mt-2">
									for _, cap := range agentType.Capabilities {
										<span class="tag is-info is-light">{ cap }</span>
									}
								</div>
							}
						</div>
					}
				</div>
			</div>
		}
		
		if len(design.Relationships) > 0 {
			<div class="box">
				<h4 class="title is-6">🔗 Relationships ({ string(rune(len(design.Relationships))) })</h4>
				<div class="relationships-list">
					for _, rel := range design.Relationships {
						<div class="relationship-item">
							<span class="tag is-primary">{ rel.From }</span>
							<span class="icon">
								<i class="fas fa-arrow-right"></i>
							</span>
							<span class="tag is-success">{ rel.To }</span>
							<br/>
							if len(rel.Topics) > 0 {
								<small>{ rel.Topics[0] }</small>
							} else {
								<small>{ rel.Description }</small>
							}
						</div>
					}
				</div>
			</div>
		}
		
		if design.Description != "" {
			<div class="box">
				<h4 class="title is-6">📄 Description</h4>
				<p class="content">{ design.Description }</p>
			</div>
		}
	</div>
}

// EmptyDesignPreview shows placeholder when no design exists yet
templ EmptyDesignPreview() {
	<div class="empty-state">
		<div class="has-text-centered p-6">
			<span class="icon is-large has-text-grey-light">
				<i class="fas fa-project-diagram fa-3x"></i>
			</span>
			<p class="title is-5 mt-4">No Design Yet</p>
			<p class="subtitle is-6">Start chatting with the AI to build your agency architecture</p>
		</div>
	</div>
}
