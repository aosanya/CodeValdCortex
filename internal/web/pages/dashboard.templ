package pages

import (
	"fmt"
	"github.com/aosanya/CodeValdCortex/internal/agent"
	"github.com/aosanya/CodeValdCortex/internal/web/components"
)

type DashboardStats struct {
	Total     int
	Running   int
	Stopped   int
	Paused    int
	Unhealthy int
	Healthy   int
}

templ Dashboard(agents []*agent.Agent, stats DashboardStats) {
	@components.Layout("Dashboard") {
		<div x-data="dashboard()" x-init="init()">
		<!-- Page Header -->
		<div class="mb-6">
			<div class="level">
				<div class="level-left">
					<div class="level-item">
						<div>
							<h1 class="title is-2 mb-2">
								Agent Dashboard
							</h1>
							<p class="subtitle is-5 has-text-grey mt-0">
								Monitor and manage your AI agents
							</p>
						</div>
					</div>
				</div>
				<div class="level-right">
					<div class="level-item">
						<div class="buttons">
							<a href="/geo-network" class="button is-primary is-light">
								<span class="icon">
									<i class="fas fa-map-marked-alt"></i>
								</span>
								<span>Geographic Visualizer</span>
							</a>
							<a href="/topology" class="button is-info is-light">
								<span class="icon">
									<i class="fas fa-project-diagram"></i>
								</span>
								<span>Topology View</span>
							</a>
						</div>
					</div>
				</div>
			</div>
		</div>			<!-- Stats Grid -->
			<div class="columns is-multiline mb-6">
				<div class="column is-3">
					@components.StatsCard("Total Agents", fmt.Sprintf("%d", stats.Total), "users", "blue")
				</div>
				<div class="column is-3">
					@components.StatsCard("Running", fmt.Sprintf("%d", stats.Running), "play-circle", "green")
				</div>
				<div class="column is-3">
					@components.StatsCard("Stopped", fmt.Sprintf("%d", stats.Stopped), "stop-circle", "yellow")
				</div>
				<div class="column is-3">
					@components.StatsCard("Unhealthy", fmt.Sprintf("%d", stats.Unhealthy), "alert-circle", "red")
				</div>
			</div>
			
			<!-- Filters -->
			<div class="box mb-6">
				<div class="columns">
					<div class="column">
						<div class="field">
							<div class="control">
								<input 
									type="text" 
									x-model="search"
									placeholder="Search agents..."
									class="input"
								/>
							</div>
						</div>
					</div>
					<div class="column is-narrow">
						<div class="field">
							<div class="control">
								<div class="select is-fullwidth">
									<select x-model="filter">
										<option value="all">All States</option>
										<option value="running">Running</option>
										<option value="stopped">Stopped</option>
										<option value="paused">Paused</option>
										<option value="error">Error</option>
									</select>
								</div>
							</div>
						</div>
					</div>
					<div class="column is-narrow">
						<div class="field">
							<div class="control">
								<div class="select is-fullwidth">
									<select x-model="healthFilter">
										<option value="all">All Health</option>
										<option value="healthy">Healthy</option>
										<option value="unhealthy">Unhealthy</option>
									</select>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			
			<!-- Hidden trigger for OOB updates - no visible content, only triggers updates -->
			<div 
				hx-get="/api/web/agents/live"
				hx-trigger="every 10s"
				hx-swap="none"
				style="display: none;"
			></div>
			
			<!-- Agent Grid (no HTMX attributes - updated via OOB only) -->
			<div 
				id="agents-grid" 
				class="columns is-multiline"
				style="min-height: 300px;"
			>
				if len(agents) > 0 {
					for _, a := range agents {
						<div class="column is-one-third-desktop is-half-tablet" id={ fmt.Sprintf("agent-col-%s", a.ID) }>
							@components.AgentCard(a)
						</div>
					}
				} else {
					<div class="column">
						<div class="has-text-centered py-6">
							<svg style="width: 3rem; height: 3rem; margin: 0 auto;" class="has-text-grey-light" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
							</svg>
							<h3 class="subtitle is-5 mt-4">No agents</h3>
							<p class="has-text-grey">Get started by creating a new agent.</p>
							<div class="mt-5">
								<button 
									@click="$dispatch('open-create-modal')"
									class="button is-primary"
								>
									<span class="icon">
										<i class="fas fa-plus"></i>
									</span>
									<span>Create Agent</span>
								</button>
							</div>
						</div>
					</div>
				}
			</div>
			
			<!-- Loading Indicator -->
			<div class="htmx-indicator notification is-primary" style="position: fixed; bottom: 1rem; right: 1rem; z-index: 9999;">
				<div class="level is-mobile">
					<div class="level-left">
						<div class="level-item">
							<span class="icon">
								<svg class="spinning" style="width: 1.25rem; height: 1.25rem;" fill="none" viewBox="0 0 24 24">
									<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
									<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
								</svg>
							</span>
						</div>
						<div class="level-item">
							<span>Updating...</span>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}
