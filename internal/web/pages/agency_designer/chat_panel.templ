package agency_designer

import (
	"github.com/aosanya/CodeValdCortex/internal/ai"
	"github.com/aosanya/CodeValdCortex/internal/agency"
)

// ChatPanel renders the AI chat panel for the agency designer
templ ChatPanel(currentAgency *agency.Agency, conversation *ai.ConversationContext) {
	<aside class="chat-panel">
		<header class="chat-header">
			<div class="chat-header-content">
				<span class="icon is-medium has-text-primary">
					<i class="fas fa-comments"></i>
				</span>
				<div>
					<h3 class="chat-title">Designer</h3>
					<p class="chat-subtitle">{ currentAgency.Name }</p>
				</div>
			</div>
		</header>
		
		<div class="chat-messages-container" id="chat-messages">
			if conversation != nil && len(conversation.Messages) > 0 {
				@ChatMessages(conversation.Messages)
			} else {
				@WelcomeMessage(currentAgency.Name)
			}
		</div>
		
		<!-- Typing Indicator -->
		<div class="typing-indicator" id="typing-indicator" style="display: none;">
			<div class="typing-bubble">
				<span></span><span></span><span></span>
			</div>
		</div>
		
		<!-- AI Processing Indicator for Chat -->
		<div class="chat-loading-indicator htmx-indicator" id="chat-loading-indicator" style="display: none;">
			<div class="message ai-message">
				<div class="message-avatar">
					<span class="icon is-medium has-text-primary">
						<i class="fas fa-robot"></i>
					</span>
				</div>
				<div class="message-content">
					<div class="message-bubble">
						<div class="is-flex is-align-items-center">
							<span class="icon has-text-info mr-2">
								<i class="fas fa-spinner fa-spin"></i>
							</span>
							<span>AI is refining your introduction...</span>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<!-- AI Process Status Bar (above input) -->
		<div class="ai-process-status htmx-indicator" id="ai-process-status" style="display: none;">
			<div class="process-content">
				<div class="process-info">
					<span class="icon has-text-info">
						<i class="fas fa-spinner fa-spin"></i>
					</span>
					<span class="process-text">AI is refining your introduction...</span>
				</div>
				<button class="button is-small is-danger is-outlined" id="stop-ai-process" title="Stop AI processing">
					<span class="icon is-small">
						<i class="fas fa-stop"></i>
					</span>
					<span>Stop</span>
				</button>
			</div>
		</div>
		
		<!-- Chat Input (Independent) -->
		<div class="chat-input-container">
			@ChatInput(currentAgency.ID, conversation)
		</div>
	</aside>
}

// WelcomeMessage displays the initial greeting
templ WelcomeMessage(agencyName string) {
	<div class="message ai-message welcome-message">
		<div class="message-avatar">
			<span class="icon is-large has-text-primary">
				<i class="fas fa-robot fa-2x"></i>
			</span>
		</div>
		<div class="message-content">
			<div class="message-bubble">
				<p><strong>Hi! I'm your AI Agency Designer.</strong> ðŸ¤–</p>
				<p>I'll help you create a complete multi-agent architecture for <strong>{ agencyName }</strong>.</p>
				<p>Let's start by understanding your use case:</p>
				<ul>
					<li>What problem are you trying to solve?</li>
					<li>What are the main processes or workflows?</li>
					<li>Who are the key actors or stakeholders?</li>
				</ul>
				<p class="mt-4"><em>ðŸ’¡ Tip: Be as detailed as you can - I'll help you refine the details as we go!</em></p>
			</div>
		</div>
	</div>
}

// ChatMessages renders the conversation history
templ ChatMessages(messages []ai.Message) {
	for _, msg := range messages {
		if msg.Role == "user" {
			@UserMessage(msg)
		} else if msg.Role == "assistant" {
			@AIMessage(msg)
		}
		// Skip system messages - they should not be displayed to users
	}
}

// UserMessage renders a user message bubble
templ UserMessage(msg ai.Message) {
	<div class="message user-message">
		<div class="message-content">
			<div class="message-bubble">
				<p>{ msg.Content }</p>
			</div>
			<div class="message-time">
				{ msg.Timestamp.Format("3:04 PM") }
			</div>
		</div>
		<div class="message-avatar">
			<span class="icon is-medium has-text-info">
				<i class="fas fa-user"></i>
			</span>
		</div>
	</div>
}

// AIMessage renders an AI assistant message bubble
templ AIMessage(msg ai.Message) {
	<div class="message ai-message">
		<div class="message-avatar">
			<span class="icon is-medium has-text-primary">
				<i class="fas fa-robot"></i>
			</span>
		</div>
		<div class="message-content">
			<div class="message-bubble">
				@templ.Raw(formatAIMessage(msg.Content))
			</div>
			<div class="message-time">
				{ msg.Timestamp.Format("3:04 PM") }
			</div>
		</div>
	</div>
}

// ChatInput renders the message input form
templ ChatInput(agencyID string, conversation *ai.ConversationContext) {
	<form 
		hx-post={ getMessageEndpoint(agencyID, conversation) }
		hx-target="#chat-messages"
		hx-swap="beforeend"
		hx-indicator="#typing-indicator"
		hx-on::after-request="document.getElementById('user-input').value = ''; document.getElementById('chat-messages').scrollTop = document.getElementById('chat-messages').scrollHeight;">
		
		<div class="field has-addons">
			<div class="control is-expanded">
				<input 
					class="input" 
					type="text" 
					name="message"
					id="user-input"
					placeholder="Describe your requirements..."
					required
					autocomplete="off"/>
			</div>
			<div class="control">
				<button class="button is-primary" type="submit">
					<span class="icon">
						<i class="fas fa-paper-plane"></i>
					</span>
				</button>
			</div>
		</div>
	</form>
}