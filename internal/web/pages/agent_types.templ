package pages

import (
	"fmt"
	"github.com/aosanya/CodeValdCortex/internal/registry"
	"github.com/aosanya/CodeValdCortex/internal/web/components"
)

templ AgentTypesPage(agentTypes []*registry.AgentType) {
	@components.Layout("Agent Types") {
		<div>
			<!-- Header -->
			<div class="mb-5">
				<div class="is-flex is-justify-content-space-between is-align-items-start">
					<div>
						<h1 class="title is-2 mb-2">
							Agent Types
						</h1>
						<p class="subtitle is-5 has-text-grey mt-0">
							Manage and configure agent type definitions
						</p>
					</div>
					<div>
						<button 
							@click="$dispatch('open-create-type-modal')"
							class="button is-primary"
						>
							<span class="icon">
								<svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
								</svg>
							</span>
							<span>Create Agent Type</span>
						</button>
					</div>
				</div>
			</div>
			
			<!-- Stats -->
			<div class="columns mb-5">
				@AgentTypeStats(agentTypes)
			</div>
			
			<!-- Filter Tabs -->
			<div 
				x-data="{ activeTab: 'all' }"
				class="mb-5"
			>
				<div class="tabs is-boxed">
					<ul>
						<li :class="{ 'is-active': activeTab === 'all' }">
							<a @click="activeTab = 'all'">
								<span>All Types</span>
								<span class="tag is-light ml-2">
									{ len(agentTypes) }
								</span>
							</a>
						</li>
						<li :class="{ 'is-active': activeTab === 'core' }">
							<a 
								@click="activeTab = 'core'"
								hx-get="/api/web/agent-types?category=core"
								hx-target="#agent-types-grid"
								hx-trigger="click"
							>
								<span>Core</span>
								<span class="tag is-primary is-light ml-2">
									{ countByCategory(agentTypes, "core") }
								</span>
							</a>
						</li>
						<li :class="{ 'is-active': activeTab === 'infrastructure' }">
							<a 
								@click="activeTab = 'infrastructure'"
								hx-get="/api/web/agent-types?category=infrastructure"
								hx-target="#agent-types-grid"
								hx-trigger="click"
							>
								<span>Infrastructure</span>
								<span class="tag is-success is-light ml-2">
									{ countByCategory(agentTypes, "infrastructure") }
								</span>
							</a>
						</li>
						<li :class="{ 'is-active': activeTab === 'enabled' }">
							<a 
								@click="activeTab = 'enabled'"
								hx-get="/api/web/agent-types?enabled=true"
								hx-target="#agent-types-grid"
								hx-trigger="click"
							>
								<span>Enabled Only</span>
								<span class="tag is-success is-light ml-2">
									{ countEnabled(agentTypes) }
								</span>
							</a>
						</li>
					</ul>
				</div>
			</div>
			
			<!-- Agent Types Grid -->
			<div 
				id="agent-types-grid"
				class="columns is-multiline"
			>
				if len(agentTypes) == 0 {
					<div class="column">
						<div class="has-text-centered py-6">
							<svg style="width: 3rem; height: 3rem; margin: 0 auto;" class="has-text-grey-light" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
							</svg>
							<h3 class="subtitle is-5 mt-4">No agent types</h3>
							<p class="has-text-grey">Get started by creating a new agent type.</p>
						</div>
					</div>
				} else {
					for _, agentType := range agentTypes {
						<div class="column is-one-third">
							@components.AgentTypeCard(agentType)
						</div>
					}
				}
			</div>
		</div>
	}
}

templ AgentTypeStats(agentTypes []*registry.AgentType) {
	<div class="column">
		<div class="box">
			<div class="level is-mobile">
				<div class="level-item">
					<div class="has-background-link p-3" style="border-radius: 0.25rem;">
						<span class="icon has-text-white">
							<svg style="width: 1.5rem; height: 1.5rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
							</svg>
						</span>
					</div>
				</div>
				<div class="level-item">
					<div>
						<p class="heading">Total Types</p>
						<p class="title">{ len(agentTypes) }</p>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<div class="column">
		<div class="box">
			<div class="level is-mobile">
				<div class="level-item">
					<div class="has-background-success p-3" style="border-radius: 0.25rem;">
						<span class="icon has-text-white">
							<svg style="width: 1.5rem; height: 1.5rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
						</span>
					</div>
				</div>
				<div class="level-item">
					<div>
						<p class="heading">Enabled</p>
						<p class="title">{ countEnabled(agentTypes) }</p>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<div class="column">
		<div class="box">
			<div class="level is-mobile">
				<div class="level-item">
					<div class="has-background-primary p-3" style="border-radius: 0.25rem;">
						<span class="icon has-text-white">
							<svg style="width: 1.5rem; height: 1.5rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
							</svg>
						</span>
					</div>
				</div>
				<div class="level-item">
					<div>
						<p class="heading">System Types</p>
						<p class="title">{ countSystemTypes(agentTypes) }</p>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<div class="column">
		<div class="box">
			<div class="level is-mobile">
				<div class="level-item">
					<div class="has-background-warning p-3" style="border-radius: 0.25rem;">
						<span class="icon has-text-white">
							<svg style="width: 1.5rem; height: 1.5rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"></path>
							</svg>
						</span>
					</div>
				</div>
				<div class="level-item">
					<div>
						<p class="heading">Categories</p>
						<p class="title">{ countCategories(agentTypes) }</p>
					</div>
				</div>
			</div>
		</div>
	</div>
}

func countByCategory(types []*registry.AgentType, category string) string {
	count := 0
	for _, t := range types {
		if t.Category == category {
			count++
		}
	}
	return fmt.Sprintf("%d", count)
}

func countEnabled(types []*registry.AgentType) string {
	count := 0
	for _, t := range types {
		if t.IsEnabled {
			count++
		}
	}
	return fmt.Sprintf("%d", count)
}

func countSystemTypes(types []*registry.AgentType) string {
	count := 0
	for _, t := range types {
		if t.IsSystemType {
			count++
		}
	}
	return fmt.Sprintf("%d", count)
}

func countCategories(types []*registry.AgentType) string {
	categories := make(map[string]bool)
	for _, t := range types {
		categories[t.Category] = true
	}
	return fmt.Sprintf("%d", len(categories))
}
