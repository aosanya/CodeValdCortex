package pages

import (
	"fmt"
	"github.com/aosanya/CodeValdCortex/internal/registry"
	"github.com/aosanya/CodeValdCortex/internal/web/components"
)

templ AgentTypesPage(agentTypes []*registry.AgentType) {
	@components.Layout("Agent Types") {
		<div class="container mx-auto px-4 py-8">
			<!-- Header -->
			<div class="mb-8">
				<div class="flex justify-between items-center">
					<div>
						<h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
							Agent Types
						</h1>
						<p class="text-gray-600 dark:text-gray-400">
							Manage and configure agent type definitions
						</p>
					</div>
					<button 
						@click="$dispatch('open-create-type-modal')"
						class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
						</svg>
						<span>Create Agent Type</span>
					</button>
				</div>
			</div>
			
			<!-- Stats -->
			<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
				@AgentTypeStats(agentTypes)
			</div>
			
			<!-- Filter Tabs -->
			<div 
				x-data="{ activeTab: 'all' }"
				class="mb-6"
			>
				<div class="border-b border-gray-200 dark:border-gray-700">
					<nav class="-mb-px flex space-x-8">
						<button 
							@click="activeTab = 'all'"
							:class="{ 'border-blue-500 text-blue-600': activeTab === 'all', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'all' }"
							class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
						>
							All Types
							<span class="ml-2 py-0.5 px-2 rounded-full bg-gray-100 dark:bg-gray-800 text-xs">
								{ len(agentTypes) }
							</span>
						</button>
						<button 
							@click="activeTab = 'core'"
							:class="{ 'border-blue-500 text-blue-600': activeTab === 'core', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'core' }"
							class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
							hx-get="/api/web/agent-types?category=core"
							hx-target="#agent-types-grid"
							hx-trigger="click"
						>
							Core
							<span class="ml-2 py-0.5 px-2 rounded-full bg-purple-100 dark:bg-purple-900 text-xs">
								{ countByCategory(agentTypes, "core") }
							</span>
						</button>
						<button 
							@click="activeTab = 'infrastructure'"
							:class="{ 'border-blue-500 text-blue-600': activeTab === 'infrastructure', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'infrastructure' }"
							class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
							hx-get="/api/web/agent-types?category=infrastructure"
							hx-target="#agent-types-grid"
							hx-trigger="click"
						>
							Infrastructure
							<span class="ml-2 py-0.5 px-2 rounded-full bg-green-100 dark:bg-green-900 text-xs">
								{ countByCategory(agentTypes, "infrastructure") }
							</span>
						</button>
						<button 
							@click="activeTab = 'enabled'"
							:class="{ 'border-blue-500 text-blue-600': activeTab === 'enabled', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'enabled' }"
							class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
							hx-get="/api/web/agent-types?enabled=true"
							hx-target="#agent-types-grid"
							hx-trigger="click"
						>
							Enabled Only
							<span class="ml-2 py-0.5 px-2 rounded-full bg-green-100 dark:bg-green-900 text-xs">
								{ countEnabled(agentTypes) }
							</span>
						</button>
					</nav>
				</div>
			</div>
			
			<!-- Agent Types Grid -->
			<div 
				id="agent-types-grid"
				class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6"
			>
				if len(agentTypes) == 0 {
					<div class="col-span-full text-center py-12">
						<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
						</svg>
						<h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No agent types</h3>
						<p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Get started by creating a new agent type.</p>
					</div>
				} else {
					for _, agentType := range agentTypes {
						@components.AgentTypeCard(agentType)
					}
				}
			</div>
		</div>
	}
}

templ AgentTypeStats(agentTypes []*registry.AgentType) {
	<div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
		<div class="flex items-center">
			<div class="flex-shrink-0 bg-blue-500 rounded-md p-3">
				<svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
				</svg>
			</div>
			<div class="ml-5 w-0 flex-1">
				<dl>
					<dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
						Total Types
					</dt>
					<dd class="text-2xl font-semibold text-gray-900 dark:text-white">
						{ len(agentTypes) }
					</dd>
				</dl>
			</div>
		</div>
	</div>
	
	<div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
		<div class="flex items-center">
			<div class="flex-shrink-0 bg-green-500 rounded-md p-3">
				<svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
			</div>
			<div class="ml-5 w-0 flex-1">
				<dl>
					<dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
						Enabled
					</dt>
					<dd class="text-2xl font-semibold text-gray-900 dark:text-white">
						{ countEnabled(agentTypes) }
					</dd>
				</dl>
			</div>
		</div>
	</div>
	
	<div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
		<div class="flex items-center">
			<div class="flex-shrink-0 bg-purple-500 rounded-md p-3">
				<svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
				</svg>
			</div>
			<div class="ml-5 w-0 flex-1">
				<dl>
					<dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
						System Types
					</dt>
					<dd class="text-2xl font-semibold text-gray-900 dark:text-white">
						{ countSystemTypes(agentTypes) }
					</dd>
				</dl>
			</div>
		</div>
	</div>
	
	<div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
		<div class="flex items-center">
			<div class="flex-shrink-0 bg-orange-500 rounded-md p-3">
				<svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"></path>
				</svg>
			</div>
			<div class="ml-5 w-0 flex-1">
				<dl>
					<dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
						Categories
					</dt>
					<dd class="text-2xl font-semibold text-gray-900 dark:text-white">
						{ countCategories(agentTypes) }
					</dd>
				</dl>
			</div>
		</div>
	</div>
}

func countByCategory(types []*registry.AgentType, category string) string {
	count := 0
	for _, t := range types {
		if t.Category == category {
			count++
		}
	}
	return fmt.Sprintf("%d", count)
}

func countEnabled(types []*registry.AgentType) string {
	count := 0
	for _, t := range types {
		if t.IsEnabled {
			count++
		}
	}
	return fmt.Sprintf("%d", count)
}

func countSystemTypes(types []*registry.AgentType) string {
	count := 0
	for _, t := range types {
		if t.IsSystemType {
			count++
		}
	}
	return fmt.Sprintf("%d", count)
}

func countCategories(types []*registry.AgentType) string {
	categories := make(map[string]bool)
	for _, t := range types {
		categories[t.Category] = true
	}
	return fmt.Sprintf("%d", len(categories))
}
