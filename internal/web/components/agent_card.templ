package components

import (
	"fmt"
	"time"
	"github.com/aosanya/CodeValdCortex/internal/agent"
)

templ AgentCard(a *agent.Agent) {
	<div 
		class="box"
		x-data="{ expanded: false }"
		data-agent-id={ a.ID }
	>
		<!-- Header -->
		<div class="level is-mobile mb-4">
			<div class="level-left">
				<div class="level-item">
					<div>
						<h3 class="title is-5 mb-1">
							{ a.Name }
						</h3>
						<p class="subtitle is-6 has-text-grey">
							{ a.Type }
						</p>
					</div>
				</div>
			</div>
			
			<div class="level-right">
				<div class="level-item">
					<div class="tags">
						@StatusBadge(a.GetState())
						@HealthIndicator(a.IsHealthy())
					</div>
				</div>
			</div>
		</div>
		
		<!-- Info -->
		<div class="content is-small mb-4">
			<div class="level is-mobile">
				<div class="level-left">
					<span class="has-text-grey">ID:</span>
				</div>
				<div class="level-right">
					<span class="is-family-monospace is-size-7">{ a.ID[:8] }...</span>
				</div>
			</div>
			<div class="level is-mobile">
				<div class="level-left">
					<span class="has-text-grey">Created:</span>
				</div>
				<div class="level-right">
					<span>{ formatTime(a.CreatedAt) }</span>
				</div>
			</div>
			if !a.LastHeartbeat.IsZero() {
				<div class="level is-mobile">
					<div class="level-left">
						<span class="has-text-grey">Last Heartbeat:</span>
					</div>
					<div class="level-right">
						<span>{ formatTimeAgo(a.LastHeartbeat) }</span>
					</div>
				</div>
			}
		</div>
		
		<!-- Actions -->
		<div class="buttons mb-4">
			if a.GetState() == agent.StateStopped || a.GetState() == agent.StateCreated {
				@ActionButton("Start", a.ID, "start", "success")
			}
			if a.GetState() == agent.StateRunning {
				@ActionButton("Stop", a.ID, "stop", "danger")
				@ActionButton("Restart", a.ID, "restart", "warning")
			}
			if a.GetState() == agent.StateRunning {
				@ActionButton("Pause", a.ID, "pause", "warning")
			}
			if a.GetState() == agent.StatePaused {
				@ActionButton("Resume", a.ID, "resume", "success")
			}
		</div>
		
		<!-- Details Toggle -->
		<div class="pt-4" style="border-top: 1px solid #dbdbdb;">
			<button 
				@click="expanded = !expanded"
				class="button is-fullwidth is-text"
			>
				<span x-text="expanded ? 'Hide Details' : 'Show Details'">Show Details</span>
				<span class="icon">
					<svg 
						style="width: 1rem; height: 1rem; transition: transform 0.2s;"
						:style="expanded ? 'transform: rotate(180deg);' : ''"
						fill="none" 
						stroke="currentColor" 
						viewBox="0 0 24 24"
					>
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
					</svg>
				</span>
			</button>
			
			<div 
				x-show="expanded" 
				x-transition
				class="mt-4"
			>
				<div class="box has-background-light">
					<h4 class="subtitle is-6 mb-2">Metadata</h4>
					if len(a.Metadata) > 0 {
						<div class="content is-small">
							for key, value := range a.Metadata {
								<div class="level is-mobile">
									<div class="level-left">
										<span class="has-text-grey">{ key }:</span>
									</div>
									<div class="level-right">
										<span>{ value }</span>
									</div>
								</div>
							}
						</div>
					} else {
						<p class="has-text-grey is-italic">No metadata</p>
					}
				</div>
				
				<a 
					href={ templ.SafeURL(fmt.Sprintf("/dashboard/agents/%s", a.ID)) }
					class="button is-fullwidth is-light"
				>
					View Full Details â†’
				</a>
			</div>
		</div>
	</div>
}

templ StatusBadge(state agent.State) {
	<span class={ "tag " + statusClasses(state) }>
		{ string(state) }
	</span>
}

templ HealthIndicator(healthy bool) {
	if healthy {
		<span class="tag is-success is-light">
			<span class="icon is-small">
				<svg style="width: 0.75rem; height: 0.75rem;" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
				</svg>
			</span>
			<span>Healthy</span>
		</span>
	} else {
		<span class="tag is-danger is-light">
			<span class="icon is-small">
				<svg style="width: 0.75rem; height: 0.75rem;" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
				</svg>
			</span>
			<span>Unhealthy</span>
		</span>
	}
}

templ ActionButton(label, agentID, action, style string) {
	<button 
		hx-post={ fmt.Sprintf("/api/web/agents/%s/%s", agentID, action) }
		hx-target="closest [data-agent-id]"
		hx-swap="outerHTML"
		hx-indicator=".htmx-indicator"
		class={ "button is-small " + actionButtonClasses(style) }
	>
		{ label }
	</button>
}

func statusClasses(state agent.State) string {
	switch state {
	case agent.StateRunning:
		return "is-success"
	case agent.StateStopped:
		return "is-light"
	case agent.StatePaused:
		return "is-warning"
	case agent.StateFailed:
		return "is-danger"
	case agent.StateCreated:
		return "is-info"
	default:
		return "is-light"
	}
}

func actionButtonClasses(style string) string {
	switch style {
	case "success":
		return "is-success"
	case "danger":
		return "is-danger"
	case "warning":
		return "is-warning"
	default:
		return "is-primary"
	}
}

func formatTime(t time.Time) string {
	return t.Format("Jan 2, 15:04")
}

func formatTimeAgo(t time.Time) string {
	duration := time.Since(t)
	
	if duration < time.Minute {
		return "just now"
	} else if duration < time.Hour {
		mins := int(duration.Minutes())
		return fmt.Sprintf("%dm ago", mins)
	} else if duration < 24*time.Hour {
		hours := int(duration.Hours())
		return fmt.Sprintf("%dh ago", hours)
	} else {
		days := int(duration.Hours() / 24)
		return fmt.Sprintf("%dd ago", days)
	}
}
