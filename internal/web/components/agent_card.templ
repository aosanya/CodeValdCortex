package components

import (
	"fmt"
	"time"
	"github.com/aosanya/CodeValdCortex/internal/agent"
)

templ AgentCard(a *agent.Agent) {
	<div 
		class="bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow p-6"
		x-data="{ expanded: false }"
		data-agent-id={ a.ID }
	>
		<!-- Header -->
		<div class="flex justify-between items-start mb-4">
			<div class="flex-1">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">
					{ a.Name }
				</h3>
				<p class="text-sm text-gray-500 dark:text-gray-400">
					{ a.Type }
				</p>
			</div>
			
			<div class="flex items-center space-x-2">
				@StatusBadge(a.GetState())
				@HealthIndicator(a.IsHealthy())
			</div>
		</div>
		
		<!-- Info -->
		<div class="space-y-2 text-sm mb-4">
			<div class="flex justify-between">
				<span class="text-gray-600 dark:text-gray-400">ID:</span>
				<span class="text-gray-900 dark:text-white font-mono text-xs">{ a.ID[:8] }...</span>
			</div>
			<div class="flex justify-between">
				<span class="text-gray-600 dark:text-gray-400">Created:</span>
				<span class="text-gray-900 dark:text-white">{ formatTime(a.CreatedAt) }</span>
			</div>
			if !a.LastHeartbeat.IsZero() {
				<div class="flex justify-between">
					<span class="text-gray-600 dark:text-gray-400">Last Heartbeat:</span>
					<span class="text-gray-900 dark:text-white">{ formatTimeAgo(a.LastHeartbeat) }</span>
				</div>
			}
		</div>
		
		<!-- Actions -->
		<div class="flex gap-2 mb-4">
			if a.GetState() == agent.StateStopped || a.GetState() == agent.StateCreated {
				@ActionButton("Start", a.ID, "start", "success")
			}
			if a.GetState() == agent.StateRunning {
				@ActionButton("Stop", a.ID, "stop", "danger")
				@ActionButton("Restart", a.ID, "restart", "warning")
			}
			if a.GetState() == agent.StateRunning {
				@ActionButton("Pause", a.ID, "pause", "warning")
			}
			if a.GetState() == agent.StatePaused {
				@ActionButton("Resume", a.ID, "resume", "success")
			}
		</div>
		
		<!-- Details Toggle -->
		<div class="border-t dark:border-gray-700 pt-4">
			<button 
				@click="expanded = !expanded"
				class="w-full flex justify-between items-center text-sm text-primary hover:text-blue-600 font-medium"
			>
				<span x-text="expanded ? 'Hide Details' : 'Show Details'">Show Details</span>
				<svg 
					class="w-4 h-4 transition-transform"
					:class="expanded ? 'rotate-180' : ''"
					fill="none" 
					stroke="currentColor" 
					viewBox="0 0 24 24"
				>
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
				</svg>
			</button>
			
			<div 
				x-show="expanded" 
				x-transition
				class="mt-4 space-y-2 text-sm"
			>
				<div class="bg-gray-50 dark:bg-gray-900 p-3 rounded">
					<h4 class="font-semibold text-gray-900 dark:text-white mb-2">Metadata</h4>
					if len(a.Metadata) > 0 {
						<dl class="space-y-1">
							for key, value := range a.Metadata {
								<div class="flex justify-between">
									<dt class="text-gray-600 dark:text-gray-400">{ key }:</dt>
									<dd class="text-gray-900 dark:text-white">{ value }</dd>
								</div>
							}
						</dl>
					} else {
						<p class="text-gray-500 dark:text-gray-400 italic">No metadata</p>
					}
				</div>
				
				<a 
					href={ templ.SafeURL(fmt.Sprintf("/dashboard/agents/%s", a.ID)) }
					class="block w-full text-center px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
				>
					View Full Details â†’
				</a>
			</div>
		</div>
	</div>
}

templ StatusBadge(state agent.State) {
	<span class={ statusClasses(state) }>
		{ string(state) }
	</span>
}

templ HealthIndicator(healthy bool) {
	if healthy {
		<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
			<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
				<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
			</svg>
			Healthy
		</span>
	} else {
		<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
			<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
				<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
			</svg>
			Unhealthy
		</span>
	}
}

templ ActionButton(label, agentID, action, style string) {
	<button 
		hx-post={ fmt.Sprintf("/api/web/agents/%s/%s", agentID, action) }
		hx-target="closest [data-agent-id]"
		hx-swap="outerHTML"
		hx-indicator=".htmx-indicator"
		class={ actionButtonClasses(style) }
	>
		{ label }
	</button>
}

func statusClasses(state agent.State) string {
	base := "inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold"
	switch state {
	case agent.StateRunning:
		return base + " bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
	case agent.StateStopped:
		return base + " bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200"
	case agent.StatePaused:
		return base + " bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"
	case agent.StateFailed:
		return base + " bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
	case agent.StateCreated:
		return base + " bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
	default:
		return base + " bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200"
	}
}

func actionButtonClasses(style string) string {
	base := "px-3 py-1.5 text-xs font-medium rounded transition-colors"
	switch style {
	case "success":
		return base + " bg-green-500 text-white hover:bg-green-600"
	case "danger":
		return base + " bg-red-500 text-white hover:bg-red-600"
	case "warning":
		return base + " bg-yellow-500 text-white hover:bg-yellow-600"
	default:
		return base + " bg-primary text-white hover:bg-blue-600"
	}
}

func formatTime(t time.Time) string {
	return t.Format("Jan 2, 15:04")
}

func formatTimeAgo(t time.Time) string {
	duration := time.Since(t)
	
	if duration < time.Minute {
		return "just now"
	} else if duration < time.Hour {
		mins := int(duration.Minutes())
		return fmt.Sprintf("%dm ago", mins)
	} else if duration < 24*time.Hour {
		hours := int(duration.Hours())
		return fmt.Sprintf("%dh ago", hours)
	} else {
		days := int(duration.Hours() / 24)
		return fmt.Sprintf("%dd ago", days)
	}
}
