package components

templ HomepageLayout(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title } - CodeValdCortex</title>
			
			<!-- Bulma CSS (self-hosted) -->
			<link rel="stylesheet" href="/static/css/bulma.min.css"/>
			
			<!-- Custom styles -->
			<link rel="stylesheet" href="/static/css/styles.css"/>
			<link rel="stylesheet" href="/static/css/themes.css"/>
			
			<!-- HTMX (self-hosted) -->
			<script src="/static/js/htmx.min.js"></script>
			
			<!-- Alpine.js (self-hosted) -->
			<script defer src="/static/js/alpine.min.js"></script>
			
			<!-- Theme manager -->
			<script src="/static/js/theme-manager.js"></script>
			
			<!-- Progress bar for HTMX requests -->
			<div id="htmx-progress"></div>
		</head>
		<body>
			@HomepageNavbar()
			
			<main>
				{ children... }
			</main>
			
			<!-- Create Agency Modal -->
			@CreateAgencyModal()
			
			<!-- Bulma navbar burger toggle -->
			<script>
				document.addEventListener('DOMContentLoaded', () => {
					// Get all "navbar-burger" elements
					const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);
					
					// Add a click event on each of them
					$navbarBurgers.forEach( el => {
						el.addEventListener('click', () => {
							// Get the target from the "data-target" attribute
							const target = el.dataset.target;
							const $target = document.getElementById(target);
							
							// Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
							el.classList.toggle('is-active');
							$target.classList.toggle('is-active');
						});
					});
				});
			</script>
		</body>
	</html>
}

templ HomepageNavbar() {
	<nav class="navbar" role="navigation" aria-label="main navigation">
		<div class="container">
			<div class="navbar-brand">
				<a href="/" class="navbar-item">
					<svg style="width: 2rem; height: 2rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"></path>
					</svg>
					<span class="ml-2 has-text-weight-bold is-size-5">CodeValdCortex</span>
				</a>
				
				<a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target="navbarMenu">
					<span aria-hidden="true"></span>
					<span aria-hidden="true"></span>
					<span aria-hidden="true"></span>
				</a>
			</div>
			
			<div id="navbarMenu" class="navbar-menu">
				<div class="navbar-start">
					<!-- Empty - no links on homepage -->
				</div>
				
				<div class="navbar-end">
					<div class="navbar-item">
						<div class="buttons">
							<!-- Theme Switcher -->
							<div class="navbar-item has-dropdown" x-data="themeSwitcher()" :class="{ 'is-active': isOpen }">
								<a class="navbar-link" @click="toggleDropdown()">
									<span class="icon">
										<svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v6a2 2 0 002 2h4a2 2 0 002-2V5z"></path>
										</svg>
									</span>
									<span x-text="getCurrentThemeName()"></span>
								</a>
								
								<div class="navbar-dropdown is-right">
									<a class="navbar-item" @click="selectTheme('light')" :class="{ 'is-active': currentTheme === 'light' }">
										<span class="theme-preview" style="background-color: #ffffff; display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; border: 1px solid rgba(0, 0, 0, 0.2);"></span>
										<span>
											<strong>Light</strong>
											<br/>
											<small>Clean and bright</small>
										</span>
									</a>
									<a class="navbar-item" @click="selectTheme('midnight-coral')" :class="{ 'is-active': currentTheme === 'midnight-coral' }">
										<span class="theme-preview" style="background-color: #FF6B6B; display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; border: 1px solid rgba(0, 0, 0, 0.2);"></span>
										<span>
											<strong>Midnight Coral</strong>
											<br/>
											<small>Professional with vibrant accents</small>
										</span>
									</a>
									<a class="navbar-item" @click="selectTheme('slate-purple')" :class="{ 'is-active': currentTheme === 'slate-purple' }">
										<span class="theme-preview" style="background-color: #8b5cf6; display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; border: 1px solid rgba(0, 0, 0, 0.2);"></span>
										<span>
											<strong>Slate Purple</strong>
											<br/>
											<small>Bold and tech-forward</small>
										</span>
									</a>
									<a class="navbar-item" @click="selectTheme('charcoal-emerald')" :class="{ 'is-active': currentTheme === 'charcoal-emerald' }">
										<span class="theme-preview" style="background-color: #10b981; display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; border: 1px solid rgba(0, 0, 0, 0.2);"></span>
										<span>
											<strong>Charcoal Emerald</strong>
											<br/>
											<small>Fresh and trustworthy</small>
										</span>
									</a>
									<a class="navbar-item" @click="selectTheme('navy-orange')" :class="{ 'is-active': currentTheme === 'navy-orange' }">
										<span class="theme-preview" style="background-color: #f97316; display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; border: 1px solid rgba(0, 0, 0, 0.2);"></span>
										<span>
											<strong>Navy Orange</strong>
											<br/>
											<small>Energetic and confident</small>
										</span>
									</a>
									<a class="navbar-item" @click="selectTheme('obsidian-cyan')" :class="{ 'is-active': currentTheme === 'obsidian-cyan' }">
										<span class="theme-preview" style="background-color: #06b6d4; display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; border: 1px solid rgba(0, 0, 0, 0.2);"></span>
										<span>
											<strong>Obsidian Cyan</strong>
											<br/>
											<small>Sleek and minimalist</small>
										</span>
									</a>
									<hr class="navbar-divider"/>
									<a class="navbar-item" @click="selectTheme('dark')" :class="{ 'is-active': currentTheme === 'dark' }">
										<span class="theme-preview" style="background-color: #121212; display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; border: 1px solid rgba(0, 0, 0, 0.2);"></span>
										<span>
											<strong>Dark Mode</strong>
											<br/>
											<small>Easy on the eyes</small>
										</span>
									</a>
								</div>
							</div>
							
							<a 
								class="navbar-item"
								onclick="openCreateAgencyModal()"
							>
								<span class="icon">
									<svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
									</svg>
								</span>
								<span>Create Agency</span>
							</a>
						</div>
					</div>
				</div>
			</div>
		</div>
	</nav>
}

templ CreateAgencyModal() {
	<div id="create-agency-modal" class="modal">
		<div class="modal-background" onclick="closeCreateAgencyModal()"></div>
		<div class="modal-card" style="max-width: 500px;">
			<header class="modal-card-head">
				<p class="modal-card-title">Create New Agency</p>
				<button class="delete" aria-label="close" onclick="closeCreateAgencyModal()"></button>
			</header>
			
			<section class="modal-card-body">
				<form id="create-agency-form">
					<!-- Agency Name -->
					<div class="field">
						<label class="label">Agency Name</label>
						<div class="control">
							<input class="input is-large" type="text" name="name" id="agency-name"
								   placeholder="e.g., Smart Logistics Platform" required autofocus/>
						</div>
						<p class="help">Enter a descriptive name for your agency. You can configure details in the designer.</p>
					</div>

					<!-- Error message display -->
					<div id="error-message" class="notification is-danger" style="display: none;"></div>
				</form>
			</section>
			
			<footer class="modal-card-foot">
				<button class="button is-success is-large" type="button" onclick="submitCreateAgency()">
					<span class="icon">âœ“</span>
					<span>Create & Open Designer</span>
				</button>
				<button class="button" onclick="closeCreateAgencyModal()">Cancel</button>
			</footer>
		</div>
	</div>

	<script>
		function openCreateAgencyModal() {
			document.getElementById('create-agency-modal').classList.add('is-active');
			// Focus on name input
			setTimeout(() => {
				document.getElementById('agency-name').focus();
			}, 100);
		}

		function closeCreateAgencyModal() {
			document.getElementById('create-agency-modal').classList.remove('is-active');
			document.getElementById('create-agency-form').reset();
			document.getElementById('error-message').style.display = 'none';
		}

		async function submitCreateAgency() {
			const form = document.getElementById('create-agency-form');
			const errorDiv = document.getElementById('error-message');
			const nameInput = document.getElementById('agency-name');
			
			// Validate name is provided
			if (!nameInput.value.trim()) {
				errorDiv.textContent = 'Agency name is required';
				errorDiv.style.display = 'block';
				return;
			}
			
			// Generate UUID with "agency_" prefix and without hyphens
			const uuid = 'agency_' + crypto.randomUUID().replace(/-/g, '');
			
			// Create request payload with minimal data
			const payload = {
				id: uuid, // UUID with agency_ prefix and without hyphens
				name: nameInput.value.trim(),
				display_name: nameInput.value.trim(), // Use name as display name initially
				category: 'other', // Default category
				icon: 'ðŸ“‹', // Default icon
				description: 'Created via quick setup', // Default description
			};

			try {
				const response = await fetch('/api/v1/agencies', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(payload)
				});

				if (!response.ok) {
					const error = await response.json();
					throw new Error(error.error || error.details || 'Failed to create agency');
				}

				const result = await response.json();
				
				// Close modal and redirect to agency dashboard/designer
				closeCreateAgencyModal();
				// TODO: Redirect to agency designer when MVP-025 is implemented
				// For now, redirect to agency dashboard
				window.location.href = `/agencies/${result.id}/dashboard`;
			} catch (error) {
				errorDiv.textContent = error.message;
				errorDiv.style.display = 'block';
			}
		}

		// Allow Enter key to submit
		document.addEventListener('DOMContentLoaded', () => {
			const nameInput = document.getElementById('agency-name');
			if (nameInput) {
				nameInput.addEventListener('keypress', (e) => {
					if (e.key === 'Enter') {
						e.preventDefault();
						submitCreateAgency();
					}
				});
			}
		});
	</script>
}
