// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func HomepageLayout(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/components/homepage_layout.templ`, Line: 9, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " - CodeValdCortex</title><!-- Bulma CSS (self-hosted) --><link rel=\"stylesheet\" href=\"/static/css/bulma.min.css\"><!-- Custom styles --><link rel=\"stylesheet\" href=\"/static/css/styles.css\"><!-- HTMX (self-hosted) --><script src=\"/static/js/htmx.min.js\"></script><!-- Alpine.js (self-hosted) --><script defer src=\"/static/js/alpine.min.js\"></script><!-- Progress bar for HTMX requests --><div id=\"htmx-progress\"></div></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = HomepageNavbar().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<main>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</main><!-- Create Agency Modal -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = CreateAgencyModal().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<!-- Bulma navbar burger toggle --><script>\n\t\t\t\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\t\t\t\t// Get all \"navbar-burger\" elements\n\t\t\t\t\tconst $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);\n\t\t\t\t\t\n\t\t\t\t\t// Add a click event on each of them\n\t\t\t\t\t$navbarBurgers.forEach( el => {\n\t\t\t\t\t\tel.addEventListener('click', () => {\n\t\t\t\t\t\t\t// Get the target from the \"data-target\" attribute\n\t\t\t\t\t\t\tconst target = el.dataset.target;\n\t\t\t\t\t\t\tconst $target = document.getElementById(target);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Toggle the \"is-active\" class on both the \"navbar-burger\" and the \"navbar-menu\"\n\t\t\t\t\t\t\tel.classList.toggle('is-active');\n\t\t\t\t\t\t\t$target.classList.toggle('is-active');\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func HomepageNavbar() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<nav class=\"navbar is-light\" role=\"navigation\" aria-label=\"main navigation\"><div class=\"container\"><div class=\"navbar-brand\"><a href=\"/\" class=\"navbar-item\"><svg style=\"width: 2rem; height: 2rem;\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z\"></path></svg> <span class=\"ml-2 has-text-weight-bold is-size-5\">CodeValdCortex</span></a> <a role=\"button\" class=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarMenu\"><span aria-hidden=\"true\"></span> <span aria-hidden=\"true\"></span> <span aria-hidden=\"true\"></span></a></div><div id=\"navbarMenu\" class=\"navbar-menu\"><div class=\"navbar-start\"><!-- Empty - no links on homepage --></div><div class=\"navbar-end\"><div class=\"navbar-item\"><div class=\"buttons\"><button class=\"button is-primary\" onclick=\"openCreateAgencyModal()\"><span class=\"icon\"><svg style=\"width: 1.25rem; height: 1.25rem;\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16m8-8H4\"></path></svg></span> <span>Create Agency</span></button></div></div></div></div></div></nav>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func CreateAgencyModal() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<div id=\"create-agency-modal\" class=\"modal\"><div class=\"modal-background\" onclick=\"closeCreateAgencyModal()\"></div><div class=\"modal-card\" style=\"max-width: 500px;\"><header class=\"modal-card-head\"><p class=\"modal-card-title\">Create New Agency</p><button class=\"delete\" aria-label=\"close\" onclick=\"closeCreateAgencyModal()\"></button></header><section class=\"modal-card-body\"><form id=\"create-agency-form\"><!-- Agency Name --><div class=\"field\"><label class=\"label\">Agency Name</label><div class=\"control\"><input class=\"input is-large\" type=\"text\" name=\"name\" id=\"agency-name\" placeholder=\"e.g., Smart Logistics Platform\" required autofocus></div><p class=\"help\">Enter a descriptive name for your agency. You can configure details in the designer.</p></div><!-- Error message display --><div id=\"error-message\" class=\"notification is-danger\" style=\"display: none;\"></div></form></section><footer class=\"modal-card-foot\"><button class=\"button is-success is-large\" type=\"button\" onclick=\"submitCreateAgency()\"><span class=\"icon\">âœ“</span> <span>Create & Open Designer</span></button> <button class=\"button\" onclick=\"closeCreateAgencyModal()\">Cancel</button></footer></div></div><script>\n\t\tfunction openCreateAgencyModal() {\n\t\t\tdocument.getElementById('create-agency-modal').classList.add('is-active');\n\t\t\t// Focus on name input\n\t\t\tsetTimeout(() => {\n\t\t\t\tdocument.getElementById('agency-name').focus();\n\t\t\t}, 100);\n\t\t}\n\n\t\tfunction closeCreateAgencyModal() {\n\t\t\tdocument.getElementById('create-agency-modal').classList.remove('is-active');\n\t\t\tdocument.getElementById('create-agency-form').reset();\n\t\t\tdocument.getElementById('error-message').style.display = 'none';\n\t\t}\n\n\t\tasync function submitCreateAgency() {\n\t\t\tconst form = document.getElementById('create-agency-form');\n\t\t\tconst errorDiv = document.getElementById('error-message');\n\t\t\tconst nameInput = document.getElementById('agency-name');\n\t\t\t\n\t\t\t// Validate name is provided\n\t\t\tif (!nameInput.value.trim()) {\n\t\t\t\terrorDiv.textContent = 'Agency name is required';\n\t\t\t\terrorDiv.style.display = 'block';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Create request payload with minimal data\n\t\t\tconst payload = {\n\t\t\t\tid: crypto.randomUUID(), // Auto-generate UUID\n\t\t\t\tname: nameInput.value.trim(),\n\t\t\t\tdisplay_name: nameInput.value.trim(), // Use name as display name initially\n\t\t\t\tcategory: 'other', // Default category\n\t\t\t\ticon: 'ðŸ“‹', // Default icon\n\t\t\t\tdescription: 'Created via quick setup', // Default description\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst response = await fetch('/api/v1/agencies', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(payload)\n\t\t\t\t});\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\tthrow new Error(error.error || error.details || 'Failed to create agency');\n\t\t\t\t}\n\n\t\t\t\tconst result = await response.json();\n\t\t\t\t\n\t\t\t\t// Close modal and redirect to agency dashboard/designer\n\t\t\t\tcloseCreateAgencyModal();\n\t\t\t\t// TODO: Redirect to agency designer when MVP-025 is implemented\n\t\t\t\t// For now, redirect to agency dashboard\n\t\t\t\twindow.location.href = `/agencies/${result.id}/dashboard`;\n\t\t\t} catch (error) {\n\t\t\t\terrorDiv.textContent = error.message;\n\t\t\t\terrorDiv.style.display = 'block';\n\t\t\t}\n\t\t}\n\n\t\t// Allow Enter key to submit\n\t\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\t\tconst nameInput = document.getElementById('agency-name');\n\t\t\tif (nameInput) {\n\t\t\t\tnameInput.addEventListener('keypress', (e) => {\n\t\t\t\t\tif (e.key === 'Enter') {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tsubmitCreateAgency();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
